{"version":3,"sources":["components/property/Propertyimgorderpg.js"],"names":["BaseURLuploads","WEB_URL_UPLOAD","Propertyimgorderpg","props","useContext","MyContext","imgorderallpg","deletevideolistpg","savesallpg","useEffect","imgorder","match","params","AddPreview","window","scrollTo","useState","isimgorder","setimgorder","ids","a","imgorderqqq","success","console","log","imgorderlistpg","map","imageall","defaults","setuserInfo","userInfo","setasdefault","propertypgimg_id","setas","loadingadd","setloadingadd","saves","imgid","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","deletevideo","className","item","index","type","id","name","value","onChange","e","target","checked","onChangecheckroom","htmlFor","src","propertypgimg_img","alt","phototype","color","height","width","style","float","onClick","confirmAlert","title","message","buttons","label"],"mappings":"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","file":"static/js/35.d37a8361.chunk.js","sourcesContent":["import React,{useContext,useState,useEffect} from 'react';\r\nimport { MyContext } from '../../contexts/MyContext';\r\nimport Loader from 'react-loader-spinner';\r\nimport Navbarmenu from \"../menu/Navbarmenu\";\r\nimport {toast} from \"react-toastify\";\r\nimport Footer from \"../Footer\";\r\nimport '../../styles/_property.scss';\r\nimport { confirmAlert } from 'react-confirm-alert'; \r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\nimport { WEB_URL_UPLOAD } from '../../contexts/Apilinks';\r\nlet BaseURLuploads = WEB_URL_UPLOAD;\r\n\r\nconst Propertyimgorderpg = (props) => {\r\n  const {imgorderallpg,deletevideolistpg,savesallpg} = useContext(MyContext);\r\n  useEffect(() => {\r\n    imgorder(props.match.params.AddPreview);\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  const [isimgorder, setimgorder] = useState([]);\r\n  const imgorder = async(ids) =>{\r\n    try {\r\n      const imgorderqqq = await imgorderallpg(ids);\r\n      if(imgorderqqq.success === 1){\r\n        console.log('imgorderqqq',imgorderqqq.imgorderlistpg);\r\n        setimgorder(imgorderqqq.imgorderlistpg);\r\n        const setdefffsss = imgorderqqq.imgorderlistpg.map((imageall) => (<>\r\n          {imageall.defaults === 1 ?\r\n              setuserInfo({\r\n                ...userInfo,\r\n                setasdefault:imageall.propertypgimg_id,\r\n                setas:false,\r\n              })\r\n            : null\r\n          }\r\n          \r\n         \r\n         </>));\r\n         \r\n        return;\r\n      }\r\n    } catch (error) { throw error;}\r\n  }\r\n\tconst [userInfo, setuserInfo] = useState({\r\n\t\tsetasdefault: '',\r\n\t\tsetas:false,\r\n  })\r\n \r\n  const onChangecheckroom = (ids,e) => {\r\n    if (e.target.type === 'checkbox' && !e.target.checked){\r\n      setuserInfo({\r\n        ...userInfo,\r\n        [e.target.name]:''\r\n      });\r\n    \r\n  } else{\r\n    \r\n    setuserInfo({\r\n      ...userInfo,\r\n      [e.target.name]:ids,\r\n      setas:true,\r\n    });\r\n   \r\n  }\r\n} \r\nconst [loadingadd, setloadingadd] = useState(false); \r\nconst saves = async(imgid) => {\r\n  try {\r\n    setloadingadd(true);\r\n    const saves = await savesallpg(imgid,props.match.params.AddPreview);\r\n    if(saves.success === 1){\r\n      toast( ' Post Author Updates  Successfully.', {position: \"top-right\",autoClose: 5000,hideProgressBar: false, closeOnClick: true,pauseOnHover: true,draggable: true,}); \r\n      setloadingadd(false);\r\n      setuserInfo({\r\n        ...userInfo,\r\n        setas:false,\r\n      });\r\n      return;\r\n    }\r\n  } catch (error) { throw error;}\r\n}\r\nconst deletes = (imgid) => {\r\n  confirmAlert({\r\n    title: 'Confirm to Delete ',\r\n    message: 'Are you sure to do this.',\r\n    buttons: [\r\n      {\r\n        label: 'Yes',\r\n        onClick: () => deletevideo(imgid)\r\n      },\r\n      {\r\n        label: 'No',\r\n      }\r\n    ]\r\n  })\r\n};     \r\nconst deletevideo = async (imgid) => {\r\n  try {\r\n    setloadingadd(true);\r\n         const deletevideosss = await deletevideolistpg(imgid);\r\n         if(deletevideosss.success === 1){\r\n            setimgorder([]);\r\n            imgorder(props.match.params.AddPreview);\r\n            setloadingadd(false);\r\n         }\r\n  } catch (error) { throw error;}      \r\n}\r\n\r\n\r\n\r\n  return (\r\n     <>\r\n    <Navbarmenu />\r\n  <div className=\"Rentsssviews\"> \r\n    <div className=\"container\"> \r\n      <div className=\"rows\"> \r\n\r\n    <div className=\"clearfix\"></div>\r\n\r\n{isimgorder.map((item, index) => (  \r\n  <div className=\"col-md-4 \" key={item.propertypgimg_id} >\r\n  <div className=\"img__order\" >\r\n<ul> <li>\r\n<input type=\"checkbox\" id={item.propertypgimg_id}  name=\"setasdefault\" value={item.propertypgimg_id} onChange={(e)=>onChangecheckroom(item.propertypgimg_id,e)} checked={userInfo.setasdefault === item.propertypgimg_id} />\r\n    <label htmlFor={item.propertypgimg_id}><img src={BaseURLuploads + item.propertypgimg_img} alt={item.phototype} /><br/> {userInfo.setasdefault === item.propertypgimg_id ? 'Set As Default' : null } </label>\r\n\r\n    </li></ul>\r\n\r\n    <div className=\"form-group col-md-12 \">\r\n\t\t{loadingadd ? <>\r\n    <Loader type=\"Oval\" color=\"#00bf6f\" height={47} width={47} style={{float: \"left\"}}/>\r\n    </>: <>\r\n    <p className=\"btn\" onClick={()=>deletes(item.propertypgimg_id)}> Delete </p>\r\n    {userInfo.setasdefault === item.propertypgimg_id && userInfo.setas === true ?\r\n    <p className=\"btn\" onClick={()=>saves(item.propertypgimg_id)}> Save </p>\r\n    : null }\r\n    </> \r\n  } \r\n  </div>\r\n\r\n\r\n\r\n  </div>\r\n  </div>\r\n  ))}\r\n\r\n\r\n\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n    <Footer />         \r\n\t\t\t  </>\r\n  )\r\n}\r\n\r\nexport default Propertyimgorderpg\r\n"],"sourceRoot":""}